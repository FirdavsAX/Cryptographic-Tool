<!--
PSEUDOCODE / PLAN (detailed):
1. Remove the outer ScrollViewer that wraps the DataGrid so the DataGrid's internal ScrollViewer handles mouse wheel and touch gestures.
2. Enable the DataGrid's internal ScrollViewer to support touch panning and normal mouse-wheel scrolling by setting attached properties:
   - ScrollViewer.VerticalScrollBarVisibility="Auto"
   - ScrollViewer.HorizontalScrollBarVisibility="Auto"
   - ScrollViewer.PanningMode="VerticalOnly"
   - IsManipulationEnabled="True"
3. Keep row/cell styles and dark theme unchanged.
4. Verify in runtime that mouse wheel and touchpad two-finger scrolling work on the DataGrid.
-->

<UserControl x:Class="Cryptographic_Tool.Views.HashingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:Cryptographic_Tool.ViewModels"
             mc:Ignorable="d" 
             d:DesignHeight="550" d:DesignWidth="900"
             Background="#121212">

    <!-- Set the DataContext to the HashingViewModel for design-time and runtime access -->
    <UserControl.DataContext>
        <vm:HashingViewModel/>
    </UserControl.DataContext>

    <UserControl.Resources>
        <ResourceDictionary>

            <!-- 1. Custom Dark Theme Colors (Copied for self-containment) -->
            <Color x:Key="DarkBackgroundColor">#121212</Color>
            <Color x:Key="DarkSurfaceColor">#1E1E1E</Color>
            <Color x:Key="DarkElementColor">#2C2C2C</Color>
            <Color x:Key="LightTextColor">#CCCCCC</Color>
            <Color x:Key="SubtleBorderColor">#3A3C40</Color>

            <!-- 2. Custom Brushes (Copied for self-containment) -->
            <SolidColorBrush x:Key="DarkBackground" Color="{StaticResource DarkBackgroundColor}" />
            <SolidColorBrush x:Key="DarkSurface" Color="{StaticResource DarkSurfaceColor}" />
            <SolidColorBrush x:Key="DarkElement" Color="{StaticResource DarkElementColor}" />
            <SolidColorBrush x:Key="LightText" Color="{StaticResource LightTextColor}" />
            <SolidColorBrush x:Key="SubtleBorder" Color="{StaticResource SubtleBorderColor}" />

            <!-- Accent Brushes (Hashing, Action - Only those strictly needed here) -->
            <SolidColorBrush x:Key="AccentOrangeBrush" Color="#FFFF9800" />
            <SolidColorBrush x:Key="AccentTealBrush" Color="#FF009688" />

            <!-- NEW: Row-specific brushes for improved row visuals -->
            <!-- hover: subtle overlay using accent color with low opacity -->
            <SolidColorBrush x:Key="RowHoverBrush" Color="#FF00796B" Opacity="0.12" />
            <!-- selected: stronger teal for selection -->
            <SolidColorBrush x:Key="SelectedRowBrush" Color="#FF00796B" />

            <!-- 3. Control Styles (Copied for self-containment) -->

            <Style x:Key="AppDarkTextBox" TargetType="{x:Type TextBox}">
                <Setter Property="Background" Value="{StaticResource DarkElement}" />
                <Setter Property="Foreground" Value="{StaticResource LightText}" />
                <Setter Property="BorderBrush" Value="{StaticResource SubtleBorder}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Padding" Value="8,4" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="FontFamily" Value="Segoe UI"/>
                <Setter Property="FontSize" Value="13"/>
                <Setter Property="MinHeight" Value="28"/>
            </Style>

            <Style x:Key="AppDarkGroupBox" TargetType="{x:Type GroupBox}">
                <Setter Property="Foreground" Value="{StaticResource LightText}" />
                <Setter Property="BorderBrush" Value="{StaticResource SubtleBorder}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Background" Value="{StaticResource DarkSurface}" />
                <Setter Property="Padding" Value="8"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="FontFamily" Value="Segoe UI"/>
                <Setter Property="FontSize" Value="13"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupBox}">
                            <Border Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="6" Padding="{TemplateBinding Padding}">
                                <DockPanel>
                                    <TextBlock Text="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}" FontWeight="SemiBold" DockPanel.Dock="Top" Margin="2,0,0,6"/>
                                    <ContentPresenter/>
                                </DockPanel>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="AppRaisedButton" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource AccentTealBrush}" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="FontWeight" Value="SemiBold" />
                <Setter Property="Padding" Value="15,10" />
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" CornerRadius="4">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#FF00796B"/>
                                    <!-- Darker Teal -->
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- HashingDataGridHeaderStyle (Uses local/embedded resources now) -->
            <Style x:Key="HashingDataGridHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Background" Value="{StaticResource DarkElement}"/>
                <Setter Property="Foreground" Value="{StaticResource AccentOrangeBrush}"/>
                <Setter Property="FontWeight" Value="SemiBold"/>
                <Setter Property="Padding" Value="8,4"/>
                <Setter Property="BorderBrush" Value="{StaticResource SubtleBorder}"/>
                <Setter Property="BorderThickness" Value="0,0,0,1"/>
            </Style>

            <!-- Style for RadioButtons: Makes the foreground text use the accent color when checked -->
            <Style TargetType="{x:Type RadioButton}">
                <Setter Property="Foreground" Value="{StaticResource LightText}"/>
                <Style.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource AccentOrangeBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- BooleanToVisibilityConverter -->
            <BooleanToVisibilityConverter x:Key="BoolToVis"/>

            <!-- NEW: DataGrid row and cell styles to improve context/readability -->
            <Style x:Key="HashingDataGridRowStyle" TargetType="{x:Type DataGridRow}">
                <Setter Property="Foreground" Value="{StaticResource LightText}" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Padding" Value="0" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{StaticResource RowHoverBrush}" />
                    </Trigger>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{StaticResource SelectedRowBrush}" />
                        <Setter Property="Foreground" Value="White" />
                        <Setter Property="BorderBrush" Value="{StaticResource SubtleBorder}" />
                        <Setter Property="BorderThickness" Value="0" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="HashingDataGridCellStyle" TargetType="{x:Type DataGridCell}">
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Padding" Value="8,0,8,0" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{StaticResource LightText}" />
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Style.Triggers>
                    <!-- Keep cell background transparent on selection so row selection is dominant -->
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="Foreground" Value="White" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- NEW: Style for selectable, readonly TextBox inside Hash cell so user can select & copy -->
            <Style x:Key="SelectableCellTextBox" TargetType="{x:Type TextBox}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Foreground" Value="{StaticResource LightText}"/>
                <Setter Property="IsReadOnly" Value="True"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="Cursor" Value="IBeam"/>
                <Setter Property="FontFamily" Value="Segoe UI"/>
                <Setter Property="FontSize" Value="13"/>
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu>
                            <MenuItem Header="Copy" Command="ApplicationCommands.Copy" CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=TextBox}}"/>
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </UserControl.Resources>

    <Grid Margin="12">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <!-- Input label -->
            <RowDefinition Height="120"/>
            <!-- Input TextBox -->
            <RowDefinition Height="Auto"/>
            <!-- Salt & Algorithms -->
            <RowDefinition Height="Auto"/>
            <!-- Generate Button -->
            <RowDefinition Height="*"/>
            <!-- Results DataGrid -->
        </Grid.RowDefinitions>

        <!-- Input Label -->
        <TextBlock Grid.Row="0" Text="Input Text" FontWeight="Bold"
                   Foreground="{StaticResource AccentOrangeBrush}" Margin="0,0,0,6"
                   FontFamily="Segoe UI"/>

        <!-- Multi-line Input - BOUND TO VIEWMODEL -->
        <TextBox x:Name="InputTextBox" Grid.Row="1" AcceptsReturn="True" VerticalScrollBarVisibility="Auto"
                 Style="{StaticResource AppDarkTextBox}"
                 TextWrapping="Wrap" 
                 ToolTip="Enter text to hash"
                 VerticalContentAlignment="Top"
                 Text="{Binding InputText, UpdateSourceTrigger=PropertyChanged}" />

        <!-- Salt and Algorithm Selection -->
        <Grid Grid.Row="2" Margin="0,12,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*"/>
                <ColumnDefinition Width="3*"/>
            </Grid.ColumnDefinitions>

            <!-- Salt - BOUND TO VIEWMODEL -->
            <StackPanel Grid.Column="0" Margin="0,0,12,0">
                <TextBlock Text="Salt" FontWeight="SemiBold" Foreground="{StaticResource AccentOrangeBrush}" Margin="0,0,0,4" FontFamily="Segoe UI"/>
                <TextBox x:Name="SaltTextBox" Style="{StaticResource AppDarkTextBox}" 
                         ToolTip="Enter salt (Optional)"
                         Text="{Binding SaltText, UpdateSourceTrigger=PropertyChanged}" />
            </StackPanel>
            <!-- Algorithms Group -->
            <GroupBox Grid.Column="1" Header="Algorithms" Padding="8" Margin="0" Style="{StaticResource AppDarkGroupBox}">
                <StackPanel>
                    <!-- Simple Hashes - BOUND TO VIEWMODEL -->
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="0,4">
                        <RadioButton x:Name="RbSHA256" Content="SHA256" Margin="0,0,16,0" GroupName="AlgorithmGroup" 
                                     IsChecked="{Binding IsSHA256Selected}"/>
                        <RadioButton x:Name="RbSHA512" Content="SHA512" Margin="0,0,16,0" GroupName="AlgorithmGroup" 
                                     IsChecked="{Binding IsSHA512Selected}"/>
                        <RadioButton x:Name="RbMD5" Content="MD5" GroupName="AlgorithmGroup" 
                                     IsChecked="{Binding IsMD5Selected}"/>
                    </StackPanel>

                    <!-- BCrypt - BOUND TO VIEWMODEL -->
                    <StackPanel Margin="0,8,0,0">
                        <RadioButton x:Name="RbBCrypt" Content="BCrypt (Cost Factor)" GroupName="AlgorithmGroup"
                                     IsChecked="{Binding IsBCryptSelected}"/>
                        <StackPanel x:Name="BcryptParamsPanel" Orientation="Horizontal" VerticalAlignment="Center" Margin="20,6,0,0"
                                    Visibility="{Binding IsBCryptSelected, Converter={StaticResource BoolToVis}}">

                            <TextBlock Text="Cost" VerticalAlignment="Center" Margin="0,0,8,0" Foreground="{StaticResource LightText}" FontFamily="Segoe UI"/>
                            <Slider x:Name="BcryptCostSlider" Minimum="4" Maximum="16" 
                                    Value="{Binding BcryptCost}"
                                    Width="220" TickFrequency="1" IsSnapToTickEnabled="True"
                                    Foreground="{StaticResource AccentOrangeBrush}"/>
                            <TextBlock Text="{Binding BcryptCost}" Margin="8,0,0,0"
                                    VerticalAlignment="Center" FontWeight="Bold" Foreground="{StaticResource LightText}" FontFamily="Segoe UI"/>
                        </StackPanel>
                    </StackPanel>

                    <!-- Argon2 - BOUND TO VIEWMODEL -->
                    <StackPanel Margin="0,8,0,0">
                        <RadioButton x:Name="RbArgon2" Content="Argon2 Parameters" GroupName="AlgorithmGroup"
                                     IsChecked="{Binding IsArgon2Selected}"/>
                        <StackPanel x:Name="Argon2ParamsPanel" Orientation="Horizontal" Margin="20,6,0,0" HorizontalAlignment="Left" 
                                    Visibility="{Binding IsArgon2Selected, Converter={StaticResource BoolToVis}}">

                            <StackPanel>
                                <TextBlock Text="Memory (KB)" FontSize="11" Margin="0,0,0,4" Foreground="{StaticResource LightText}" FontFamily="Segoe UI"/>
                                <TextBox x:Name="Argon2MemoryBox" Width="90" Style="{StaticResource AppDarkTextBox}" 
                                         Text="{Binding Argon2Memory, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                            <StackPanel Margin="12,0,0,0">
                                <TextBlock Text="Iterations" FontSize="11" Margin="0,0,0,4" Foreground="{StaticResource LightText}" FontFamily="Segoe UI"/>
                                <TextBox x:Name="Argon2IterationsBox" Width="90" Style="{StaticResource AppDarkTextBox}" 
                                         Text="{Binding Argon2Iterations, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                            <StackPanel Margin="12,0,0,0">
                                <TextBlock Text="Parallelism" FontSize="11" Margin="0,0,0,4" Foreground="{StaticResource LightText}" FontFamily="Segoe UI"/>
                                <TextBox x:Name="Argon2ParallelismBox" Width="90" Style="{StaticResource AppDarkTextBox}" 
                                         Text="{Binding Argon2Parallelism, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </GroupBox>
        </Grid>

        <!-- Generate Button - BOUND TO VIEWMODEL COMMAND -->
        <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Left" Margin="0,12,0,12">
            <Button x:Name="GenerateButton" Content="Generate Hashes" Width="160" Height="40" Command="{Binding GenerateHashesCommand}"
                    Style="{StaticResource AppRaisedButton}" />
        </StackPanel>

        <!-- Results DataGrid - NOW BOUND TO VIEWMODEL COLLECTION -->
        <!-- Removed outer ScrollViewer so DataGrid's internal ScrollViewer handles mouse wheel & touchpad.
             Enabled touch panning via attached properties on the DataGrid.
             Modified so selected row visually stands out and Hash cell is selectable/copiable. -->
        <DataGrid x:Name="ResultsDataGrid"
                  Grid.Row="4"
                  ItemsSource="{Binding Results}"
                  AutoGenerateColumns="False" IsReadOnly="True"
                  CanUserAddRows="False" HeadersVisibility="Column"
                  RowHeight="30" ColumnHeaderHeight="36"
                  Background="{StaticResource DarkSurface}"
                  GridLinesVisibility="Horizontal" HorizontalGridLinesBrush="{StaticResource DarkElement}"
                  Foreground="{StaticResource LightText}"
                  RowBackground="{StaticResource DarkSurface}"
                  AlternatingRowBackground="{StaticResource DarkElement}"
                  AlternationCount="2"
                  RowStyle="{StaticResource HashingDataGridRowStyle}"
                  CellStyle="{StaticResource HashingDataGridCellStyle}"
                  ScrollViewer.VerticalScrollBarVisibility="Auto"
                  ScrollViewer.HorizontalScrollBarVisibility="Auto"
                  ScrollViewer.PanningMode="VerticalOnly"
                  IsManipulationEnabled="True"
                  SelectionMode="Single"
                  SelectionUnit="FullRow"
                  ClipboardCopyMode="ExcludeHeader">
            <DataGrid.ColumnHeaderStyle>
                <StaticResource ResourceKey="HashingDataGridHeaderStyle"/>
            </DataGrid.ColumnHeaderStyle>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Algorithm" Binding="{Binding Algorithm}" Width="180"/>
                <!-- Hash Output: template column with readonly TextBox to allow selecting & copying -->
                <DataGridTemplateColumn Header="Hash Output" Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBox Style="{StaticResource SelectableCellTextBox}"
                                     Text="{Binding Hash}"
                                     TextWrapping="NoWrap"
                                     HorizontalScrollBarVisibility="Auto"
                                     VerticalScrollBarVisibility="Hidden"
                                     Padding="0"
                                     Cursor="IBeam"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="Time (ms)" Binding="{Binding TimeMsDisplay}" Width="120"/>
            </DataGrid.Columns>
        </DataGrid>

        <!-- Overlay Loader: covers entire area, visible when ViewModel.IsBusy is true -->
        <Grid Grid.Row="0" Grid.RowSpan="5"
              Visibility="{Binding IsBusy, Converter={StaticResource BoolToVis}}"
              Panel.ZIndex="100"
              IsHitTestVisible="{Binding IsBusy}">
            <!-- semi-transparent dim -->
            <Border Background="#80000000" />
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Vertical" >
                <!-- Indeterminate progress bar styled for dark theme -->
                <Border Background="{StaticResource DarkSurface}" Padding="12" CornerRadius="8" Opacity="0.95">
                    <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <ProgressBar Width="260" Height="10" IsIndeterminate="True" Foreground="{StaticResource AccentTealBrush}" />
                        <TextBlock Text="Loading..." Foreground="{StaticResource LightText}" FontFamily="Segoe UI" FontWeight="SemiBold"
                                   Margin="0,10,0,0" HorizontalAlignment="Center"/>
                    </StackPanel>
                </Border>
            </StackPanel>
        </Grid>

    </Grid>
</UserControl>